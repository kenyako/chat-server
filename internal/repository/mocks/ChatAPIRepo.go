// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kenyako/chat-server/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ChatAPIRepo is an autogenerated mock type for the ChatAPIRepo type
type ChatAPIRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, info
func (_m *ChatAPIRepo) Create(ctx context.Context, info *model.CreateChat) (int64, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateChat) (int64, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateChat) int64); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateChat) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ChatAPIRepo) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: ctx, info
func (_m *ChatAPIRepo) SendMessage(ctx context.Context, info *model.SendMessageRequest) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SendMessageRequest) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatAPIRepo creates a new instance of ChatAPIRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatAPIRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatAPIRepo {
	mock := &ChatAPIRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
